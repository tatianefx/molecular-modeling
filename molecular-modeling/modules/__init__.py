#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = "tatianefx"

# from modules.chemistry.molecule import Molecule
# from modules.chemistry.amino_acid import AminoAcid, Atom
# from modules.genetic_algorithms.genetic_algorithm import GeneticAlgorithm
from modules.common.helper import normalize_vector
import sys
import psi4
# import timeit
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats
import pandas as pd
from pandas.tools.plotting import scatter_matrix

# amino_acid = input("Enter an amino acid sequence: ")

# start = timeit.default_timer()

# if AminoAcid.is_valid(amino_acid):
#     peptide = Molecule.generate_peptide_molecule(amino_acid)
#     genetic = GeneticAlgorithm(peptide)
#     print("\n\nThe best fitness: " + str(genetic.the_best_individual.fitness))
#     print("\nThe best geometry:\n")
#     print(genetic.the_best_individual.geometry)
#     matrix = genetic.the_best_individual.matrix_2d()


# Ala-Gly     Total Energy = -528.7141214969851717

# geometry = "O  0.7678  1.0333  1.1238\n" \
# "O -1.8033 -1.3184  0.3291\n" \
# "O -3.5624  0.1136  0.2770\n" \
# "N -0.1435  0.2970 -0.8788\n" \
# "N  3.2928  0.5781  0.1123\n" \
# "C  2.1762 -0.1982 -0.4209\n" \
# "C  0.8780  0.4453  0.0498\n" \
# "C  2.2573 -1.6402  0.0644\n" \
# "C -1.4706  0.8298 -0.6749\n" \
# "C -2.3923 -0.1404  0.0183\n" \
# "H  2.2275 -0.1701 -1.5150\n" \
# "H  1.4277 -2.2305 -0.3403\n" \
# "H  2.1960 -1.7024  1.1571\n" \
# "H  3.1926 -2.1132 -0.2538\n" \
# "H  0.0278 -0.2295 -1.7304\n" \
# "H -1.8824  1.0584 -1.6618\n" \
# "H -1.4058  1.7404 -0.0721\n" \
# "H  4.1724  0.1652 -0.1968\n" \
# "H  3.3017  0.5174  1.1303\n" \
# "H -2.4226 -1.9313  0.7797\n"

# Gly-Gly-Gly   Total Energy = -696.5010784885544126
#
# geometry = "O -0.5150  1.1856  1.3202\n" \
# "O  1.9894 -1.0724 -0.8496\n" \
# "O -2.1156 -1.5861 -0.2908\n" \
# "O -4.2185 -1.2858  0.5064\n" \
# "N  1.8723  1.0949 -0.0233\n" \
# "N -1.6468  0.9523 -0.6943\n" \
# "N  4.5348 -1.3138  0.1518\n" \
# "C  0.6922  1.5116 -0.7467\n" \
# "C -0.5295  1.1952  0.0913\n" \
# "C -2.9510  0.6534 -0.1472\n" \
# "C  2.4263 -0.1719 -0.1363\n" \
# "C  3.6374 -0.3407  0.7580\n" \
# "C -3.1761 -0.8222  0.0606\n" \
# "H  0.7472  2.5920 -0.9060\n" \
# "H  0.6550  0.9970 -1.7116\n" \
# "H  2.2885  1.7640  0.6178\n" \
# "H -1.5581  0.9766 -1.7060\n" \
# "H -3.6937  1.0238 -0.8593\n" \
# "H -3.0622  1.1616  0.8151\n" \
# "H  3.3036 -0.6891  1.7400\n" \
# "H  4.1647  0.6096  0.8860\n" \
# "H  4.8156 -0.9965 -0.7752\n" \
# "H  4.0483 -2.1996  0.0196\n" \
# "H -2.2864 -2.5410 -0.1453\n" \

# Ala-Gly-Ser Total Energy = -849.4371377028904

# geometry =  "O -2.4488 -2.2878 -0.0662\n" \
#    "O  0.0028  1.2407 -1.2777\n" \
#    "O -4.8271  0.7290 -0.4805\n" \
#    "O  2.4196 -1.2046  0.7962\n" \
#    "O -3.9235 -0.0531  1.4491\n" \
#    "N -1.4203  0.3319  0.3192\n" \
#    "N  2.0891  1.0752  0.5210\n" \
#    "N  5.1365 -0.8175  0.5225\n" \
#    "C -2.5414  0.0608 -0.5520\n" \
#    "C  0.7346  1.1186  1.0215\n" \
#    "C  4.2279  0.1407 -0.1019\n" \
#    "C -2.4758 -1.3448 -1.1307\n" \
#    "C -0.2350  0.9029 -0.1208\n" \
#    "C  2.8278 -0.0982  0.4492\n" \
#    "C -3.8028  0.2403  0.2667\n" \
#    "C  4.2364 -0.0338 -1.6155\n" \
#    "H -2.5336  0.8015 -1.3597\n" \
#    "H  0.6090  0.3556  1.7960\n" \
#    "H  0.5598  2.1082  1.4534\n" \
#    "H -1.5100  0.0793  1.2996\n" \
#    "H  4.5602  1.1516  0.1582\n" \
#    "H -1.5649 -1.4826 -1.7219\n" \
#    "H -3.3392 -1.5633 -1.7676\n" \
#    "H  2.4969  1.9438  0.1878\n" \
#    "H  3.5634  0.6883 -2.0908\n" \
#    "H  3.8971 -1.0342 -1.9085\n" \
#    "H  5.2398  0.1213 -2.0263\n" \
#    "H  6.0816 -0.6698  0.1694\n" \
#    "H  4.8832 -1.7659  0.2457\n" \
#    "H -3.3202 -2.2775  0.3645\n" \
#    "H -5.6499  0.8241  0.0453"

# geometry = "O  1.0081   -0.5551   -1.8575\n" \
#   "O -0.6789   -2.7971    0.2603\n" \
#   "O  5.4836   -2.3478   -0.3523\n" \
#   "O  3.9878   -2.4407    1.3520\n" \
#   "O -2.3256    1.3042    1.0021\n" \
#   "O  5.6406    3.0898    1.3743\n" \
#   "O  5.5752    2.8961   -0.8853\n" \
#   "O -5.2797   -0.9780   -0.5769\n" \
#   "N  2.2521   -0.8295    0.0829\n" \
#   "N -1.2590   -0.0770   -0.5337\n" \
#   "N -4.5827    1.2363   -0.5984\n" \
#   "N -7.8747   -0.1438   -0.1569\n" \
#   "C  3.5371   -0.9876   -0.5499\n" \
#   "C  4.2561    0.3485   -0.7723\n" \
#   "C -0.1287   -0.4409    0.2812\n" \
#   "C  1.0786   -0.6237   -0.6322\n" \
#   "C  4.6069    1.1378    0.4955\n" \
#   "C -0.4101   -1.6889    1.1117\n" \
#   "C  4.3332   -1.9811    0.2711\n" \
#   "C -2.2725    0.7719   -0.1037\n" \
#   "C -3.2967    1.0163   -1.1911\n" \
#   "C  5.3036    2.4532    0.2219\n" \
#   "C -6.7829    0.7201    0.2850\n" \
#   "C -5.4878    0.2088   -0.3332\n" \
#   "C -6.6835    0.7081    1.8053\n" \
#   "H  3.3628   -1.4575   -1.5263\n" \
#   "H  3.6334    0.9834   -1.4166\n" \
#   "H  5.1819    0.1669   -1.3337\n" \
#   "H  0.0877    0.3946    0.9585\n" \
#   "H  2.2209   -0.8149    1.0983\n" \
#   "H  3.6924    1.3604    1.0562\n" \
#   "H  5.2703    0.5378    1.1282\n" \
#   "H  0.4259   -1.9546    1.7660\n" \
#   "H -1.2920   -1.5393    1.7434\n" \
#   "H -1.3150   -0.4740   -1.4675\n" \
#   "H -3.3528    0.1682   -1.8806\n" \
#   "H -3.0128    1.9147   -1.7469\n" \
#   "H -4.8269    2.1883   -0.3415\n" \
#   "H -6.9822    1.7407   -0.0611\n" \
#   "H  0.1408   -3.0100   -0.2169\n" \
#   "H -6.4815   -0.2995    2.1869\n" \
#   "H -7.6095    1.0692    2.2656\n" \
#   "H -5.8654    1.3534    2.1442\n" \
#   "H  5.9905   -3.0034    0.1726\n" \
#   "H -8.7515    0.1741    0.2546\n" \
#   "H -7.9889   -0.0613   -1.1665\n" \
#   "H  6.1084    3.9346    1.2017\n"
#
# try:
#     psi4.core.set_output_file('output.dat', False)
#     psi4.set_memory('500 MB')
#
#     psi4.geometry(geometry)
#
#     psi4.energy('scf/cc-pvdz')
#     total_energy = psi4.core.get_variable('SCF TOTAL ENERGY')
#     print(total_energy)
# except RuntimeError:
#     pass

# ============================================

# Normalize Matrix

# matrix = [[ 1.2492,  1.1165, -0.4047],
# [ 2.5516, -2.2446, -0.9942],
# [ 0.5915, -1.1035, -1.1285],
# [ 1.7707,  1.2076, -1.7786],
# [-1.4105,  1.1507,  0.1821],
# [-0.7085, -0.1136,  0.3937],
# [ 0.7470,  0.0903,  0.0308],
# [-1.3345, -1.2000, -0.4702],
# [ 2.6493,  0.0652, -1.5860],
# [ 1.8114, -1.1318, -1.2310],
# [-0.7666, -0.3737,  1.4558],
# [-0.8580, -2.1695, -0.2878],
# [-2.4023, -1.3127, -0.2521],
# [-1.2248, -0.9797, -1.5384],
# [-2.3916,  1.0420,  0.4376],
# [-1.4071,  1.3875, -0.8099],
# [ 3.3505,  0.2709, -0.7726],
# [ 3.2005, -0.1396, -2.5078],
# [ 1.0947,  1.0073, -2.5146],
# [ 1.9913, -3.0108, -0.7463]]
#
# for i in range(len(matrix)):
#     matrix[i] = normalize_vector(matrix[i])
#
# for v in matrix:
#     print(v)

# ======================================

matrix = [[ 1.2492,  1.1165, -0.4047],
[-1.4105,  1.1507,  0.1821],
[-0.7085, -0.1136,  0.3937],
[-1.3345, -1.2000, -0.4702],
[ 0.7470,  0.0903,  0.0308],
[-0.7666, -0.3737,  1.4558],
[-0.8580, -2.1695, -0.2878],
[-2.4023, -1.3127, -0.2521],
[-1.2248, -0.9797, -1.5384],
[-2.3916,  1.0420,  0.4376],
[-1.4071,  1.3875, -0.8099],
[ 2.5516, -2.2446, -0.9942],
[ 0.5915, -1.1035, -1.1285],
[ 1.7707,  1.2076, -1.7786],
[ 2.6493,  0.0652, -1.5860],
[ 1.8114, -1.1318, -1.2310],
[ 3.3505,  0.2709, -0.7726],
[ 3.2005, -0.1396, -2.5078],
[ 1.0947,  1.0073, -2.5146],
[ 1.9913, -3.0108, -0.7463]]

xmatrix = [1.2492,
-1.4105,
-0.7085,
-1.3345,
 0.7470,
-0.7666,
-0.8580,
-2.4023,
-1.2248,
-2.3916,
-1.4071,
 2.5516,
 0.5915,
 1.7707,
 2.6493,
 1.8114,
 3.3505,
 3.2005,
 1.0947,
 1.9913]

ymatrix = [1.1165,
 1.1507,
-0.1136,
-1.2000,
 0.0903,
-0.3737,
-2.1695,
-1.3127,
-0.9797,
 1.0420,
 1.3875,
-2.2446,
-1.1035,
 1.2076,
 0.0652,
-1.1318,
 0.2709,
-0.1396,
 1.0073,
-3.0108]

zmatrix = [
-0.4047,
 0.1821,
 0.3937,
-0.4702,
 0.0308,
 1.4558,
-0.2878,
-0.2521,
-1.5384,
 0.4376,
-0.8099,
-0.9942,
-1.1285,
-1.7786,
-1.5860,
-1.2310,
-0.7726,
-2.5078,
-2.5146,
-0.7463,
]

# for i in range(len(matrix)):
#     matrix[i] = normalize_vector(matrix[i])

base = [[ 0.7678,  1.0333,  1.1238],
[ 3.2928,  0.5781,  0.1123],
[ 2.1762, -0.1982, -0.4209],
[ 2.2573, -1.6402,  0.0644],
[ 0.8780,  0.4453,  0.0498],
[ 2.2275, -0.1701, -1.5150],
[ 1.4277, -2.2305, -0.3403],
[ 3.1926, -2.1132, -0.2538],
[ 2.1960, -1.7024,  1.1571],
[ 4.1724,  0.1652, -0.1968],
[ 3.3017,  0.5174,  1.1303],
[-1.8033, -1.3184,  0.3291],
[-3.5624,  0.1136,  0.2770],
[-0.1435,  0.2970, -0.8788],
[-1.4706,  0.8298, -0.6749],
[-2.3923, -0.1404,  0.0183],
[-1.8824,  1.0584, -1.6618],
[-1.4058,  1.7404, -0.0721],
[ 0.0278, -0.2295, -1.7304],
[-2.4226, -1.9313,  0.7797]]

xbase = [ 0.7678,
 3.2928,
 2.1762,
 2.2573,
 0.8780,
 2.2275,
 1.4277,
 3.1926,
 2.1960,
 4.1724,
 3.3017,
-1.8033,
-3.5624,
-0.1435,
-1.4706,
-2.3923,
-1.8824,
-1.4058,
 0.0278,
-2.4226]

ybase = [1.0333,
 0.5781,
-0.1982,
-1.6402,
 0.4453,
-0.1701,
-2.2305,
-2.1132,
-1.7024,
 0.1652,
 0.5174,
-1.3184,
 0.1136,
 0.2970,
 0.8298,
-0.1404,
 1.0584,
 1.7404,
-0.2295,
-1.9313]

zbase = [
 1.1238,
 0.1123,
-0.4209,
 0.0644,
 0.0498,
-1.5150,
-0.3403,
-0.2538,
 1.1571,
-0.1968,
 1.1303,
 0.3291,
 0.2770,
-0.8788,
-0.6749,
 0.0183,
-1.6618,
-0.0721,
-1.7304,
 0.7797,
]

base2 = [[ 0.4696,  1.3524,  0.3122],
[-2.1900,  1.3866,  0.8990],
[-1.4880,  0.1223,  1.1106],
[-2.1140, -0.9640,  0.2467],
[-0.0325,  0.3262,  0.7477],
[-1.5461, -0.1377,  2.1727],
[-1.6375, -1.9335,  0.4291],
[-3.1818, -1.0767,  0.4648],
[-2.0043, -0.7437, -0.8214],
[-3.1711,  1.2779,  1.1545],
[-2.1866,  1.6234, -0.0929],
[ 1.7720, -2.0086, -0.2772],
[-0.1880, -0.8675, -0.4115],
[ 0.9911,  1.4435, -1.0616],
[ 1.8697,  0.3011, -0.8690],
[ 1.0318, -0.8958, -0.5140],
[ 2.5709,  0.5068, -0.0556],
[ 2.4209,  0.0963, -1.7908],
[ 0.3151,  1.2432, -1.7976],
[ 1.2117, -2.7748, -0.0293]]

# for i in range(len(base)):
#     base[i] = normalize_vector(base[i])

array_a = np.ndarray.flatten(np.array(zbase))
array_b = np.ndarray.flatten(np.array(zmatrix))
results = np.corrcoef(array_a, array_b)[0,1]

# results = stats.spearmanr(ymatrix, ybase, axis=1)
# results = stats.kendalltau(xmatrix, xbase)

print(results)

# =====================================================
#
# fig = plt.figure()
# ax = fig.add_subplot(111, projection='3d')
#
# ax.scatter(x, y, z, c='r', marker='o')
#
# # Plot a sin curve using the x and y axes.
# # data = np.corrcoef(x, y)
# # xl = data[1, 0]
# # yl = data[0, 1]
#
# # Plot a sin curve using the x and y axes.
# # xx = np.linspace(np.corrcoef(x, y)[0, 1], min(x), max(x))
# # yy = 2*xx+1
# # plt.plot(xx, yy, '-r', label='y=2x+1')
#
# ax.set_xlabel('X Label')
# ax.set_ylabel('Y Label')
# ax.set_zlabel('Z Label')
#
# plt.show()



# #Plotting to our canvas
# plt.scatter(x, z)#, align='center')
#
# #Showing what we plotted
# plt.show()


print("THE END")
# stop = timeit.default_timer()

# print('Time: ', stop - start)

sys.exit(0)
